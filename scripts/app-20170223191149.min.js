angular.module('myApp', [
    'ngAnimate',           // 动画效果
    'ngResource',
    'ui.router',  // 第三方的路由访问器
    'ngSanitize',
    'ionic',
    'CoderYuan'
]);
var app = angular.module('myApp');
app.config(function($stateProvider, $urlRouterProvider) {
	$stateProvider.state('default', {
		url: '',
		controller: function($scope, $state) {
			$state.go("index");
		}
	});
	//    $urlRouterProvider.otherwise({
	//      redirectTo: 'home'
	//    });
});
app.config(function($stateProvider) {
	$stateProvider.state('index', {
		url: '/list/index',
		templateUrl: 'list/index.html',
		controller: 'RouteHomeCtl',
		label: '首页',
		header: true,
		footer: true,
		goback: false
	}).state('list', {
		url: '/list/list',
		templateUrl: 'list/list.html',
		controller: 'RouteListCtl',
		label: '分类',
		header: true,
		footer: true,
		goback: false
	}).state('mycounrt', {
		url: '/list/mycounrt',
		templateUrl: 'list/mycounrt.html',
		controller: 'RouteMycounrtCtl',
		label: '购物车',
		header: true,
		footer: true,
		goback: false
	}).state('mycenter', {
		url: '/list/mycenter',
		templateUrl: 'list/mycenter.html',
		controller: 'RouteMycenterCtl',
		label: '个人中心',
		header: true,
		footer: true,
		goback: false
	}).state('content', {
		url: '/list/content',
		templateUrl: 'list/content.html',
		controller: 'RouteContentCtl',
		label: '充值中心',
		header: true,
		footer: false,
		goback: true
	}).state('phonepag', {
		url: '/list/phonepag',
		templateUrl: 'list/phonepag.html',
		controller: 'RoutePhonepagCtl',
		label: '移动商城',
		header: true,
		footer: false,
		goback: true
	}).state('jingdong', {
		url: '/list/jingdong',
		templateUrl: 'list/jingdong.html',
		controller: 'RouteJingdongCtl',
		label: '礼品超市',
		header: true,
		footer: false,
		goback: true
	});
});

app.run(function($rootScope, $timeout) {
	$rootScope.$on('$stateChangeSuccess', function(event, state) {
		if((/iphone|ipad/gi).test(window.navigator.appVersion)) {
			//          document.title = page.title = state.label;
			//          // hack在微信等webview中无法修改document.title的情况
			//          var iFrame = document.createElement('iframe');
			//          iFrame.setAttribute('src', '/favicon.ico');
			//          iFrame.onload = function () {
			//              $timeout(function () {
			//                  document.body.removeChild(iFrame);
			//              }, 0)
			//          };
			//          document.body.appendChild(iFrame);
		} else {
			console.log(page);
			// document.title = page.title = state.label;
		}
	});
});
angular.module('myApp').run(function (page, $rootScope) {
    $rootScope.$on('$stateChangeSuccess', function (event, state) {
    	console.log(state.label)
//      document.title = page.title = state.label;
    });
});
'use strict';

angular.module('myApp').constant('api', {
  root: '/api',
  apiOf: function(path) {
    if (!path.match('^/')) {
      throw 'path must start by /';
    }
    return this.root + path;
  }
});

var app=angular.module('myApp');
app.constant('page', {
  title: ''
});
app.factory('locals', ['$window', function ($window) {
    return {
        //存储单个属性
        set: function (key, value) {
            $window.localStorage[key] = value;
        },
        //读取单个属性
        get: function (key, defaultValue) {
            return $window.localStorage[key] || defaultValue;
        },
        //删除单个属性
        remove: function (key) {
            $window.localStorage.removeItem(key);
        },

        clear: function () {
            var inApp = this.get('inApp');
            var referId = this.get('referId');
            $window.localStorage.clear();
            this.set('inApp', inApp);
            this.set('referId', referId);
        },
        //存储对象，以JSON格式存储
        setObject: function (key, value) {
            $window.localStorage[key] = JSON.stringify(value);
        },
        //读取对象
        getObject: function (key) {
            return JSON.parse($window.localStorage[key] || '{}');
        }
    }
}]);
var app=angular.module('myApp');
app.directive('appLayout', function () {
    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'module/layout.html',
        controller: 'AppLayoutCtrl'
    };
});
document.createElement('app-layout');
app.directive('appHeader', function () {
    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'module/header.html',
        controller: 'AppHeaderCtrl'
    };
});
document.createElement('app-header');
app.directive('appFooter', function () {
    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'module/footer.html',
        controller: 'AppFooterCtrl'
    };
});
document.createElement('app-footer');
var app = angular.module('myApp');
app.directive("twTitle",function(){
	return{
		restrict:"A",
		link:function(scope,element,attrs){
			var element=element.find("li");
			for(var i=0;i<element.length;i++){
				element[i].index=i;
				var item=[];
				var vm=false;
				var ele=angular.element(document.querySelectorAll("#listcont li"));
				angular.element(element[i]).bind("click",function(){
					ele.eq(this.index).css("background","#fff");
					if(item.length < ele.length){
						if(!contains(item,this.index)){
							item.push(this.index);
							vm=false;
						};
					}else if(item.length == ele.length){
						vm=true;
					}
				});
				document.getElementById("wall").onclick=function(){
					if(vm){
						for(var i=0;i<ele.length;i++){
							angular.element(ele.eq(i)).css("background","#000");
						}
					}else{
						alert("请全部选中http://t.cn/R5YgKj2  http://t.cn/R5AnSgW");
					}
				};
				var contains=function(arr, val) {
				  if (arr.indexOf(val) !== -1) {
				    return true;
				  } else {
				    return false;
				  }
				}
			}
			}
		}
	});

var app=angular.module('myApp');
app.filter('formatTimestar', function () {
    return function (value) {
        var time = "";
        var year = value.substr(0, 4);
        var month = value.substr(4, 2);
        var date = value.substr(6, 2);
        if (value.length == 8) {
            time = year + "-" + month + "-" + date;
            return time;
        } else if (value.length == 14) {
            var hour = value.substr(8, 2);
            var minute = value.substr(10, 2);
            var second = value.substr(12, 2);
            return month + '月' + date + '日' + " " + hour + ":" + minute;
        }
    }
});
angular.module('myApp').controller('RouteContentCtl', function($scope,$ionicScrollDelegate) {
	var vm = $scope.vm = {};
	vm.completeFlag =true;
	//$state.go("mycounrt");
	vm.items =[{
			"applicationNo": "HB201702210010008873",
			"tranCode": "022",
			"tranTime": "20170221150813",
			"tranAmt": "1000"
		}, {
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221150341",
			"tranAmt": "0"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221150220",
			"tranAmt": "100"
		},{
			"applicationNo": "HB201702210010008873",
			"tranCode": "022",
			"tranTime": "20170221150813",
			"tranAmt": "1000"
		}, {
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221150341",
			"tranAmt": "0"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221150220",
			"tranAmt": "100"
		},
	{
			"applicationNo": "HB201702210010008873",
			"tranCode": "022",
			"tranTime": "20170221150813",
			"tranAmt": "1000"
		}, {
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221150341",
			"tranAmt": "0"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221150220",
			"tranAmt": "100"
		},
	{
			"applicationNo": "HB201702210010008873",
			"tranCode": "022",
			"tranTime": "20170221150813",
			"tranAmt": "1000"
		}, {
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221150341",
			"tranAmt": "0"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221150220",
			"tranAmt": "100"
		},
	{
			"applicationNo": "HB201702210010008873",
			"tranCode": "022",
			"tranTime": "20170221150813",
			"tranAmt": "1000"
		}, {
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221150341",
			"tranAmt": "0"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221150220",
			"tranAmt": "100"
		}];
		vm.list= [{
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221140341",
			"tranAmt": "2000"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221130220",
			"tranAmt": "100"
		},{
			"applicationNo": "HB201702210010008872",
			"tranCode": "024",
			"tranTime": "20170221140341",
			"tranAmt": "2000"
		}, {
			"applicationNo": "HB201702210010008871",
			"tranCode": "022",
			"tranTime": "20170221130220",
			"tranAmt": "100"
		}];
		var tirm;
	vm.loadMore = function() {
		tirm =setTimeout(function(){
			clearTimeout(tirm);
			vm.items =vm.items.concat(vm.list);
            $scope.$broadcast('scroll.infiniteScrollComplete');
            $ionicScrollDelegate.resize();
		},1000); 
	};
});
angular.module('myApp').controller("RouteHomeCtl", function($scope, $ionicSlideBoxDelegate, $http, $state) {
	var vm = $scope.vm = {};
	$scope.slideHasChanged = function(index) {
		//console.log(index);
	}
	$scope.yanzheng = function() {}
	$http.jsonp('http://10.128.165.149:9082/service/dbank/por/queryAndAnswer', {}).success(function(data, header, config, status) {
		//响应成功
		//alert(data)
		console.log("success")

	}).error(function(data, header, config, status) {
		//处理响应失败
		console.log("error")
	});
	vm.content = function() {
		$state.go("content");
	};
	vm.phonepag = function(){
		$state.go("phonepag");
	};
	vm.jingdong = function(){
		$state.go("jingdong");
	};
});

angular.module('myApp').controller('RouteJingdongCtl', function($scope, $state) {

$(document).ready(function(){

	//顶部弹出菜单
	$("#btnJdkey").click(function() {
		if ($("#jdkey").css("display") == "none") {
			$("#jdkey").show()
		} else {
			$("#jdkey").hide()
		}
	});
	
	//选项卡
	$('#my_focus').click(function(){
		$('#my_history').removeClass("current");
		$('#my_focus').addClass("current");
		$('#my_favorite').removeClass("current");
		$('.my_focus').show();
		$('.my_favorite').hide();
		$('.my_history').hide();
	});
	
	$('#my_favorite').click(function(){
		$('#my_history').removeClass("current");
		$('#my_focus').removeClass("current");
		$('#my_favorite').addClass("current");
		$('.my_favorite').show();
		$('.my_focus').hide();
		$('.my_history').hide();
	});
	
	$('#my_history').click(function(){
		$('#my_focus').removeClass("current");
		$('#my_favorite').removeClass("current");
		$('#my_history').addClass("current");
		$('.my_history').show();
		$('.my_focus').hide();
		$('.my_favorite').hide();
	});
	
});
});
angular.module('myApp').controller('RouteListCtl', function($scope,$ionicSideMenuDelegate) {
    $scope.name = "John Doe";
    //$state.go("mycounrt");
    $scope.isOpenLeft=function(){
	    	if($ionicSideMenuDelegate.isOpenLeft()){
	    		//$ionicSideMenuDelegate.toggleLeft();
	    		if(document.querySelector("#scaleZ").classList.match("scaleZ")){
	    			//angular.element(document.getElementById('scaleZ')).addClass("scaleZback");
	    		}
       //angular.element(document.getElementById("scaleX")).removeClass("scaleX");
	    	}
    }
    $scope.toggleLeftSideMenu = function() {
    	
    $ionicSideMenuDelegate.toggleLeft();
    angular.element(document.getElementById('scaleZ')).addClass("scaleZ");
    angular.element(document.getElementById("scaleX")).addClass("scaleX");
  };
});

angular.module('myApp').controller('RouteMycenterCtl', function($scope,$timeout,$filter) {

    //scope.selectDateTime.show
//  $timeout(function () {
//  	var date=document.getElementById("date123").innerText;
//  	//date=$filter("dataValue")(date)
//      date=date.replace("年", "-").replace("月", "-").replace("日", "").substr(0,10);
//      document.getElementById("date123").innerText=date;
//  },1000);
      $scope.datas=[1,2,3,4,5,6,7,8,9,10];
  var startX=0,startY=0;
  var $domScroll=$("#dash_scroll_container");
  $domScroll.on("touchstart",function(e){
    startX=e.originalEvent.changedTouches[0].pageX;
    startY=e.originalEvent.changedTouches[0].pageY;
    
    console.log("start:("+startX+","+startY+")"+"--"+$(this).scrollTop());
  });
  $domScroll.on("touchmove",function(e){
    var x = e.originalEvent.changedTouches[0].pageX-startX;
    var y = e.originalEvent.changedTouches[0].pageY-startY;
    if ( Math.abs(x) > Math.abs(y)) {//左右滑动 
     scrollLeft($(this),x);  
    }else if( Math.abs(y) > Math.abs(x)){//上下滑动
      scrollTop($(this),y);  
    }
    function scrollLeft(obj,x){ 
      var currentScroll = obj.scrollLeft();
      console.log(parseInt(currentScroll)-x);
      obj.scrollLeft(parseInt(currentScroll)-x);//滑动的距离
      
       $domScroll.css("webkitTransform", "translate3d(-"+parseInt(currentScroll)-x+"px,0,0)");  
      e.preventDefault(); 
     e.stopPropagation();
    }
    function scrollTop(obj,y){ 
      var currentScroll = obj.scrollTop();
      console.log("*******"+(parseInt(currentScroll)-y));
      obj.scrollTop(parseInt(currentScroll)-y);//滑动的距离
          		var obj=document.getElementById("webkfaid");
    		//$("ion-content .scroll").transition="-webkit-transform 500ms ease-out";
		//$("ion-content .scroll").webkitTransform="translate(0px,"+sum+"px) scale(1) translateZ(0px)";
       $("ion-content .scroll").css("webkitTransform", "translate3d(0,-"+parseInt(currentScroll)-y+"px,0)");  
      //e.preventDefault(); 
      //e.stopPropagation();
    }
    });
    var ox,oy;
//$scope.onTouch = function($event) {
//	ox = $event.target.offsetLeft;
//	oy = $event.target.offsetTop;
//};






     var _left=0,contwidth,winwidth,x ,y ,leftX,styleLeft;
     angular.element(document.getElementById("contents")).css("webkitTransform", "translate3d(0,0,0)");
	    		angular.element(document.getElementById("contents")).css("transform", "translate3d(0,0,0)");
	 angular.element(document.getElementById("contents")).bind("touchstart",function(e){
	     startX=e.originalEvent.changedTouches[0].pageX;
	     //startY=e.originalEvent.changedTouches[0].pageY;
	     _left =document.getElementById("contents").getAttribute("scrollleft");
	     //_left=angular.element(document.getElementById("contents")).css("left");
	     contwidth=document.getElementById("contents").offsetWidth;
	     winwidth=window.innerWidth;
	     console.log("start:("+startX+","+startY+")"+"_left"+_left);
	     //_left=_left.substr(0,_left.length-2);
	 });
     angular.element(document.getElementById("contents")).bind("touchmove",function(e){
	    x = e.originalEvent.changedTouches[0].pageX-startX;
	    y = e.originalEvent.changedTouches[0].pageY-startY;
	    //leftX=angular.element(document.getElementById("contents")).css("left");
        leftX=_left;//.substr(0,_left.length-2);
        styleLeft = parseFloat(_left) + Math.ceil(parseFloat(x)*1.2);
	    console.log("x  "+parseFloat(x)+"  left  "+_left);
	    angular.element(document.getElementById("contents")).attr("scrollleft",styleLeft);
		//document.getElementById("contents").style.left = styleLeft+"px";
		angular.element(document.getElementById("contents")).css("webkitTransform", "translate3d(" + styleLeft+"px,0,0)");
		angular.element(document.getElementById("contents")).css("transform", "translate3d(" + styleLeft+"px,0,0)");
     });
    //angular.element(document.getElementById("contents")).bind("touchend", $scope.touchend, false);
    document.getElementById("contents").addEventListener('touchend',function(){
	    	var scrollleft= -(contwidth - winwidth);
	    var scrollX=parseFloat(_left)+parseFloat(x);
	    if(parseFloat(scrollX)>0){
	    	    //document.getElementById("contents").style.left = "0px";
	    	 	angular.element(document.getElementById("contents")).attr("scrollleft",0);
	    	 	angular.element(document.getElementById("contents")).css("transition","-webkit-transform 500ms ease-out");
	    	 	angular.element(document.getElementById("contents")).css("webkitTransform", "translate3d(0,0,0)");
	    	 	angular.element(document.getElementById("contents")).css("transform", "translate3d(0,0,0)");
	    	}
	    if( parseFloat(scrollX)<scrollleft){
	    		//document.getElementById("contents").style.left =scrollleft+"px";
	    		angular.element(document.getElementById("contents")).attr("scrollleft",scrollleft);
	    		angular.element(document.getElementById("contents")).css("transition","-webkit-transform 500ms ease-out");
	    		angular.element(document.getElementById("contents")).css("webkitTransform", "translate3d(" + scrollleft+"px,0,0)");
	    		angular.element(document.getElementById("contents")).css("transform", "translate3d(" + scrollleft+"px,0,0)");
	    }
    }, false);  
    
    
    
    
    
    
    
    
});
angular.module('myApp').controller('RouteMycounrtCtl', function($scope) {
    $scope.name = "John Doe";
    //$state.go("mycounrt");
});
angular.module('myApp').controller('RoutePhonepagCtl', function($scope) {
	$scope.name = "John Doe";
	//$state.go("mycounrt");
});
var app=angular.module('myApp');
app.controller("AppFooterCtrl", function($scope, $state) {
	var vm = $scope.vm = {};
	$scope.route = function(state) {
		$state.go(state);
	};
	$scope.$on('$stateChangeSuccess', function(event, state) {
		vm.footer = state.footer;
		var active = document.querySelectorAll("#tabs a");
		angular.element(active).removeClass("active");

		for(var i = 0; i < active.length; i++) {
			if(state.name == angular.element(active[i]).attr("stateName")) {
				angular.element(active[i]).addClass("active");
			}
		}
statesuccess(state);
	});
	statesuccess($state.current);
	function statesuccess(state){
		vm.footer = state.footer;
		var active = document.querySelectorAll("#tabs a");
		angular.element(active).removeClass("active");

		for(var i = 0; i < active.length; i++) {
			if(state.name == angular.element(active[i]).attr("stateName")) {
				angular.element(active[i]).addClass("active");
			}
		}
	}
   
});
var app=angular.module('myApp');
app.controller("AppHeaderCtrl", function($scope, $state, page) {
	var vm = $scope.vm = {};
	vm.goback = function() {
		vm.pagew = 2;
		history.go(-1);
	}

	function stateChange() {
		vm.page = $state.current.label;
		vm.header = $state.current.header;
		vm.gobackShow = $state.current.goback;
		//		console.log(vm.header);

	}
	$scope.$on('$stateChangeSuccess', function(event, state) {
		stateChange();
	})
	stateChange();
});
var app=angular.module('myApp');
app.controller("AppLayoutCtrl",function($scope,$state){
	
});
(function () {
    /*
     coder yuan 嘻嘻……   
     */
    'use strict';
    angular.module('CoderYuan', [])
        .service('timePickerService', function () {
            var _this = this;
            //页面中选择器数量 default : 0
            _this.globalId = 0;
            return _this;
        })
        /*日期时间选择*/
        .directive('timePicker', [
            '$timeout',
            '$compile', '$ionicScrollDelegate', '$ionicBackdrop', '$q', '$filter','timePickerService',
            function ($timeout, $compile, $ionicScrollDelegate, $ionicBackdrop, $q, $filter,timePickerService) {
                return {
                    template: '<div>{{selectDateTime.show}}</div>',
                    restrict: 'AE',
                    replace: true,
                    scope: {
                        timePickerResult: '=', //双向绑定
                        loadDateTime: '=',  // 用于从服务端加载(或其他方式加载时间,反正是延迟的就对了) 初始 时间日期数值  //要配合options 中的loadLazy 属性使用  如果默认时间是从服务端加载回来的
                        //要做如下设置  <time-picker  load-date-time="data.dateTime" loadLazy="true" time-picker-result="result"></time-picker>
                        //即 loadLazy 设置为true(默认是false)标识时间数据延迟加载  data.dateTime 是从服务端加载回来的时间数据
                    },
                    link: function (scope, elm, attrs) {
                        var globalId = ++timePickerService.globalId;
                        var dateTimeNow = new Date();
                        var tem = "<div class='pickerContainer datetimeactive'>" +
                            "<div class='main'>" +
                            "<div  class='header'>{{options.title}}</div>"
                            + "<div class='body'>"
                            + "<div class='row row-no-padding'>" +
                            "<div class='col'  ng-if='!options.hideYear' ><ion-scroll  on-scroll='scrollingEvent(\"year\")' delegate-handle='yearScroll_" + globalId + "' scrollbar-y='false' class='yearContent'>" + "<ul id='yearlist'>" + "<li ng-style='year.selected ? { color: \"#0081b8\",fontWeight: \"bold\", fontSize: \"1.2em\"}:{}' ng-click='selectEvent(\"year\",$index)' ng-repeat='year in yearList'>{{year.text}}</li>" + "</ul>" + "</ion-scroll></div>" +
                            "<div class='col'  ng-if='!options.hideMonth' ><ion-scroll  on-scroll='scrollingEvent(\"month\")' delegate-handle='monthScroll_" + globalId + "' scrollbar-y='false' class='monthContent'>" + "<ul>" + "<li ng-style='month.selected ? { color: \"#0081b8\",fontWeight: \"bold\", fontSize: \"1.2em\"}:{}' ng-click='selectEvent(\"month\",$index)' ng-repeat='month in monthList'>{{month.text}}</li>" + "</ul>" + "</ion-scroll></div>" +
                            "<div class='col ' ng-if='!options.hideDate' ><ion-scroll on-scroll='scrollingEvent(\"date\")' delegate-handle='dateScroll_" + globalId + "' scrollbar-y='false' class='dateContent'>" + "<ul>" + "<li ng-style='date.selected ? { color: \"#0081b8\",fontWeight: \"bold\", fontSize: \"1.2em\"}:{}' ng-click='selectEvent(\"date\",$index)' ng-repeat='date in dateList'>{{date.text}}</li>" + "</ul>" + "</ion-scroll></div>" +
                            //"<div class='col ' ng-if='!options.hideTime' ><ion-scroll on-scroll='scrollingEvent(\"time\")' delegate-handle='timeScroll_" + globalId + "' scrollbar-y='false' class='timeContent'>" + "<ul>" + "<li ng-style='time.selected ? { color: \"#0081b8\",fontWeight: \"bold\", fontSize: \"1.2em\"}:{}' ng-click='selectEvent(\"time\",$index)' ng-repeat='time in timeList'>{{time.text}}</li>" + "</ul>" + "</ion-scroll></div>" +
                            "</div>"
                            + "<div class='body_center_highlight'></div>" +
                            "</div>" +
                            "<div class='footer'>" +
                            "<span ng-click='ok()'>确定</span><span ng-click='cancel()'>取消</span>" +
                            "</div>" +
                            "</div>" +
                            "</div>";
                        // 配置 教程  ！！！！！！！！   time-picker-result 这个选项是必须配置的 用来接收选择结果 其他的可不用 使用默认配置
                        //options 中的参数  都可在页面配置  如
                        // <time-picker
                        // timeSpan="30"
                        // DateTime="2012-20-09 10:30"  ！！！注意这里  时间部分的设置 要 和参数中的 timespan 相对应 如 timeSpan 为 15 时 则生成的时间 列表 是 10:00 10:15 10:30 10:45.... 这时就要求 分钟数要相对 如不能设置 为 10:18
                        // title="我是程序员"
                        // time-picker-result="model.result">
                        // </time-picker>
                        var options = {
                            title: attrs.title || "时间选择",
                            height: 40,// 每个滑动 li 的高度 这里如果也配置的话 要修改css文件中的高度的定义
                            timeNum: parseInt(attrs.timenum) || 24,//可选时间数量
                            yearStart: (attrs.yearstart && parseInt(attrs.yearstart)) || dateTimeNow.getFullYear() - 20,//开始年份
                            yearEnd: (attrs.yearend && parseInt(attrs.yearend)) || dateTimeNow.getFullYear() + 20,  //结束年份
                            monthStart: 12,//开始月份
                            monthEnd: 1,//结束月份
                            DateTime: attrs.datetime && new Date(attrs.datetime) || dateTimeNow, //开始时间日期  不给默认是当天
                            timeSpan: attrs.timespan && parseInt(attrs.timespan) || 15, //时间间隔 默认 15分钟一个间隔 15/30
                            minuteSkip: attrs.minuteskip && parseInt(attrs.minuteskip),//当前时间多少分钟后 可选 15 30  ！！！注意 这个设置会覆盖 datetime中设定的时间部分的值
                            loadLazy: attrs.loadlazy || false,  //标识默认的时间数据是否从服务端加载回来的
                            hideYear: attrs.hideyear || false, //选择器中隐藏年份选择栏
                            hideMoth: attrs.hidemoth || false,//选择器中隐藏月份选择栏
                            hideDate: attrs.hidedate || false,//选择器中隐藏日期选择栏
                            hideTime: attrs.hidetime || false//选择器中隐藏时间选择栏
                        }
                        scope.options = options;
                        scope.yearScrollTimer = null; //年份滑动定时器
                        scope.monthScrollTimer = null; //月份滑动定时器
                        scope.dateScrollTimer = null; //日期滑动定时器
                        scope.timeScrollTimer = null; //时间滑动定时器
                        scope.dateList = [];
                        scope.timeList = [];
                        scope.yearList = [];
                        scope.monthList = [];
                        scope.selectDateTime = {
                            year: {item: null, index: 0},
                            month: {item: null, index: 0},
                            date: {item: null, index: 0},
                            time: {item: null, index: 0},
                            show: ""
                        };
                        scope.specialDateTime = {
                            bigMoth: [1, 3, 4, 5, 7, 8, , 10, 12],
                            isBigMonth: function (month) {
                                var length = this.bigMoth.length;
                                while (length--) {
                                    if (this.bigMoth[length] == month) {
                                        return true;
                                    }
                                }
                                return false;
                            },
                            isLoopYear: function (year) { //是否是闰年
                                return (year % 4 == 0) && (year % 100 != 0 || year % 400 == 0);
                            }
                        };
                        if (options.loadLazy) {
                            scope.$watch("loadDateTime", function () {
                                if (scope.loadDateTime) {
                                    options.DateTime = new Date(scope.loadDateTime);
                                    scope.options = options;
                                    init(options);
                                }
                            });
                        } else {
                            scope.options = options;
                            init(options);
                        }

                        elm.on("click", function () {
                            show();
                            scrollToElm(scope.yearScroll, scope.yearList[scope.selectDateTime.year.index - 3]);
                            scrollToElm(scope.monthScroll, scope.monthList[scope.selectDateTime.month.index - 3]);
                            scrollToElm(scope.dateScroll, scope.dateList[scope.selectDateTime.date.index - 3]);
                            scrollToElm(scope.timeScroll, scope.timeList[scope.selectDateTime.time.index - 3]);
                        });
                        //滑动Event
                        scope.scrollingEvent = function (type) {
                            var opEntity = getOperateEntity(type);
                            //当前存在滑动则取消
                            scope[opEntity.scrollTimer] && $timeout.cancel(scope[opEntity.scrollTimer]);

                            var posi = scope[opEntity.scrollHandler].getScrollPosition();
                            var index = Math.abs(Math.round(posi.top / scope.options.height));
                            if (posi.top == index * scope.options.height) {
                                updateSelect(index + 3, type);
                            } else {
                                scope[opEntity.scrollTimer] = $timeout(function () {
                                    posi.top = index * 40;
                                    updateSelect(index + 3, type);
                                    scrollToPosi(scope[opEntity.scrollHandler], posi);
                                }, 100);
                            }
                        }
                        //点击Event
                        scope.selectEvent = function (type, index) {
                            var opEntity = getOperateEntity(type);
                            if (index > 2 && index <= scope[opEntity.data].length - 3) {
                                scrollToElm(scope[opEntity.scrollHandler], scope[opEntity.data][index - 3]);
                            }
                        }

                        //初始化
                        function init(options) {
                            initYear(options);
                            initMoth(options);
                            initDate(options);
                            initTime(options);
                            tem = angular.element(tem);
                            $compile(tem)(scope);
                            angular.element(document.body).append(tem);
                            scope.yearScroll = $ionicScrollDelegate.$getByHandle("yearScroll_" + globalId);
                            scope.monthScroll = $ionicScrollDelegate.$getByHandle("monthScroll_" + globalId);
                            scope.dateScroll = $ionicScrollDelegate.$getByHandle("dateScroll_" + globalId);
                            scope.timeScroll = $ionicScrollDelegate.$getByHandle("timeScroll_" + globalId);
                            getSelectDateTime();
                            setSelectDateTimeShow();
                        }

                        //年份初始化
                        function initYear(options) {
                            var defaultYear = options.DateTime.getFullYear();
                            var yearSpan = options.yearEnd - options.yearStart;
                            var text, data, top, item, defaultItem, defaultIndex;
                            prependLi(scope.yearList, 3, "b")
                            for (var i = 0; i <= yearSpan; i++) {
                                text = options.yearStart + i+"年";
                                data = options.yearStart + i;
                                top = options.height + scope.yearList[scope.yearList.length - 1].top;
                                item = createDateTimeLi(0, top, data, data == defaultYear, text);
                                if (data == defaultYear) {
                                    defaultItem = item;
                                    defaultIndex = scope.yearList.length;
                                }
                                scope.yearList.push(item);
                            }
                            //设置默认选择
                            scope.selectDateTime.year.item = defaultItem;
                            scope.selectDateTime.year.index = defaultIndex;
                            prependLi(scope.yearList, 3, "e")
                        }

                        //月份初始化
                        function initMoth(options) {
                            var defaultMonth = options.DateTime.getMonth() + 1 == 0 ? 12 : prependZero(options.DateTime.getMonth() + 1, 10);
                            var text, data, original, top, item, defaultItem, defaultIndex;
                            prependLi(scope.monthList, 3, "b")
                            for (var i = 1; i <= 12; i++) {
                                original = i;
                                data = prependZero(i, 10);
                                text = prependZero(i, 10) + "月";
                                top = options.height + scope.monthList[scope.monthList.length - 1].top;
                                item = createDateTimeLi(0, top, data, data == defaultMonth, text);
                                if (data == defaultMonth) {
                                    defaultItem = item;
                                    defaultIndex = scope.monthList.length;
                                }
                                scope.monthList.push(item);
                            }
                            //设置默认选择
                            scope.selectDateTime.month.item = defaultItem;
                            scope.selectDateTime.month.index = defaultIndex;
                            prependLi(scope.monthList, 3, "e")
                        }

                        //日期初始化
                        function initDate(options) {
                            //开始时间
                            var defaultDate = prependZero(options.DateTime.getDate(), 10);
                            var text, data, top, item, defaultItem, defaultIndex;
                            var dateNum = getDateNum(options.DateTime.getFullYear(), options.DateTime.getMonth() + 1);
                            prependLi(scope.dateList, 3, "b")
                            for (var i = 1; i <= dateNum; i++) {
                                data = prependZero(i, 10);
                                text = prependZero(i, 10) + "日";
                                top = options.height + scope.dateList[scope.dateList.length - 1].top;
                                item = createDateTimeLi(0, top, data, data == defaultDate, text);
                                if (data == defaultDate) {
                                    defaultItem = item;
                                    defaultIndex = scope.dateList.length;
                                }
                                scope.dateList.push(item);
                            }
                            //设置默认选择
                            scope.selectDateTime.date.item = defaultItem;
                            scope.selectDateTime.date.index = defaultIndex;
                            prependLi(scope.dateList, 3, "e");
                        }

                        //时间初始化
                        function initTime(options) {
                            prependLi(scope.timeList, 3, "b");
                            var timeStart = options.DateTime.getHours();
                            for (var i = 0; i < options.timeNum; i++) {
                                var t = timeStart + i;
                                if (t >= 24) {
                                    t = t - 24;
                                    t = prependZero(t, 10);
                                } else if (t < 10) {
                                    t = prependZero(t, 10);
                                }
                                //按时间间隔来生产时间li
                                for (var j = 0; j < 60 / (options.timeSpan); j++) {
                                    var top = options.height + scope.timeList[scope.timeList.length - 1].top;
                                    var data = t + ":" + (j * options.timeSpan == 0 ? "00" : j * options.timeSpan);
                                    scope.timeList.push(createDateTimeLi(0, top, data, false, data));
                                }
                            }
                            prependLi(scope.timeList, 3, "e");
                            //获取默认选择时间
                            var defaultSelectTime = getDefaultSelectTime(options);
                            angular.forEach(scope.timeList, function (item, index) {
                                if (item.data == defaultSelectTime) {
                                    item.selected = true;
                                    scope.selectDateTime.time.item = item;
                                    scope.selectDateTime.time.index = index;
                                    return;
                                }
                            });
                        }

                        //计算默认的选择时间
                        function getDefaultSelectTime(options) {
                            var hour;
                            var minu;
                            //不设置 或者默认时间 除以 时间间隔的(timeSpan) 不为整数的
                            if (options.minuteSkip || parseInt((options.DateTime.getMinutes() / options.timeSpan)) != (options.DateTime.getMinutes() / options.timeSpan)) {
                                options.minuteSkip = options.minuteSkip || 30;
                                var datetimeNow = new Date();
                                hour = datetimeNow.getHours();
                                minu = datetimeNow.getMinutes();
                                minu = minu + options.minuteSkip;
                                var span = minu - 60;
                                var spanNum;
                                if (span >= 0) {
                                    hour += 1;
                                    spanNum = Math.round(Math.abs(span) / options.timeSpan);
                                } else {
                                    spanNum = Math.round(minu / options.timeSpan);
                                }
                                switch (spanNum) {
                                    case 1:
                                        minu = options.timeSpan;
                                        break;
                                    case 2:
                                        minu = options.timeSpan * 2;
                                        break;
                                    case 3:
                                        minu = options.timeSpan * 3;
                                        break;
                                    case 4:
                                        hour += 1;
                                        minu = 0;
                                    default :
                                        minu = 0;
                                        break;
                                }
                            } else {
                                hour = options.DateTime.getHours();
                                minu = options.DateTime.getMinutes();
                            }
                            return prependZero(hour, 10) + ":" + prependZero(minu, 10);
                        }

                        function prependZero(data, num) {
                            return data >= num ? data : "0" + data;
                        }

                        function createDateTimeLi(left, top, data, selected, text) {
                            var li = {left: left, top: top, data: data, selected: selected, text: text};
                            return li;
                        }

                        function prependLi(arr, num, loc) {
                            loc = loc || "b";
                            switch (loc) {
                                case "b":
                                    for (var i = 0; i < num; i++) {
                                        arr.push(createDateTimeLi(0, options.height * i, "", false, ""));
                                    }
                                    break;
                                case "e":
                                    //最后那个li元素的 top
                                    var lastPosiTop = arr[arr.length - 1].top;
                                    for (var j = 0; j < num; j++) {
                                        arr.push(createDateTimeLi(0, (options.height * (i + 1) + lastPosiTop), "", false, ""));
                                    }
                                    break;
                            }
                        }

                        //滑动到指定元素
                        function scrollToElm(scorllHandler, elm) {
                            scorllHandler.scrollTo(elm.left, elm.top, true);
                        }

                        //滑动到指定位置
                        function scrollToPosi(scorllHandler, posi) {
                            scorllHandler.scrollTo(posi.left, posi.top, true);
                        }

                        function updateSelect(index, type) {
                            switch (type) {
                                case "year":

                                    //强制
                                    $timeout(function () {
                                        scope.selectDateTime.year.item.selected = false;
                                        scope.yearList[index].selected = true;
                                        scope.selectDateTime.year.item = scope.yearList[index];
                                        scope.selectDateTime.year.index = index;
                                        resettingDate(scope.selectDateTime.year.item.data, parseInt(scope.selectDateTime.month.item.data));  //年份变化 重置日期栏
                                    });
                                    break;
                                case "month":

                                    //强制
                                    $timeout(function () {
                                        scope.selectDateTime.month.item.selected = false;
                                        scope.monthList[index].selected = true;
                                        scope.selectDateTime.month.item = scope.monthList[index];
                                        scope.selectDateTime.month.index = index;
                                        resettingDate(scope.selectDateTime.year.item.data, parseInt(scope.selectDateTime.month.item.data));  //月份变化 重置日期栏
                                    });
                                    break;
                                case "date":
                                    $timeout(function () {
                                        scope.selectDateTime.date.item.selected = false;
                                        scope.dateList[index].selected = true;
                                        scope.selectDateTime.date.item = scope.dateList[index];
                                        scope.selectDateTime.date.index = index;
                                    });
                                    break;
                                case "time":
                                    $timeout(function () {
                                        scope.selectDateTime.time.item.selected = false;
                                        scope.timeList[index].selected = true;
                                        scope.selectDateTime.time.item = scope.timeList[index];
                                        scope.selectDateTime.time.index = index;
                                    });
                                    break;
                            }
                        }

                        //选中时间展示
                        function setSelectDateTimeShow() {
                            var yearTxt = scope.selectDateTime.year.item.text;
                            var monthTxt = scope.selectDateTime.month.item.text;
                            var dateTxt = scope.selectDateTime.date.item.text;
                            var timeTxt = scope.selectDateTime.time.item.text;
                            scope.selectDateTime.show = (scope.options.hideYear ? "" : yearTxt + "" ) + (scope.options.hideMoth ? "" : monthTxt) + (scope.options.hideDate ? "" : dateTxt + " ") + (scope.options.hideTime ? "" : timeTxt);
                            scope.$watch('scope.selectDateTime.show',function(newVal,oldVal){
								scope.selectDateTime.show=scope.selectDateTime.show.replace("年", "-").replace("月", "-").replace("日", "").substr(0,10);
							});
                        }
                        //获取选中的datetime
                        function getSelectDateTime() {
                            var year, month, date, time;
                            for (var i = 0; i < scope.yearList.length; i++) {
                                if (scope.yearList[i].selected) {
                                    year = scope.yearList[i].data;
                                    scope.selectDateTime.year.item = scope.yearList[i];
                                    scope.selectDateTime.year.index = i;
                                    break;
                                }
                            }
                            for (var i = 0; i < scope.monthList.length; i++) {
                                if (scope.monthList[i].selected) {
                                    month = scope.monthList[i].data;
                                    scope.selectDateTime.month.item = scope.monthList[i];
                                    scope.selectDateTime.month.index = i;
                                    break;
                                }
                            }
                            for (var i = 0; i < scope.dateList.length; i++) {
                                if (scope.dateList[i].selected) {
                                    date = scope.dateList[i].data;
                                    scope.selectDateTime.date.item = scope.dateList[i];
                                    scope.selectDateTime.date.index = i;
                                    break;
                                }
                            }
                            for (var j = 0; j < scope.timeList.length; j++) {
                                if (scope.timeList[j].selected) {
                                    time = scope.timeList[j].data;
                                    scope.selectDateTime.time.item = scope.timeList[j];
                                    scope.selectDateTime.time.index = j;
                                    break;
                                }
                            }
                            if (!year) {
                                year = scope.selectDateTime.year.item.data;
                            }
                            if (!month) {
                                year = scope.selectDateTime.month.item.data;
                            }
                            if (!date) {
                                date = scope.selectDateTime.date.item.data;
                            }
                            if (!time) {
                                time = scope.selectDateTime.time.item.data;
                            }
                            var value = year + "-" + month + "-" + date + " " + time;
                            scope.timePickerResult = value;
                            return value;

                        }

                        //根据年份和月份计算日期数量
                        function getDateNum(year, month) {
                            var dateNum = 30;
                            if (scope.specialDateTime.isBigMonth(month)) { //大小月判断
                                dateNum++;
                            } else {
                                if (scope.specialDateTime.isLoopYear(year)) {
                                    if (month == 2)
                                        dateNum--;
                                } else {
                                    if (month == 2)
                                        dateNum -= 2;
                                }
                            }
                            return dateNum;
                        }

                        //重置日期选择栏数据
                        function resettingDate(year, month) {
                            var dateNum = getDateNum(year, month);
                            if (dateNum != scope.dateList.length - 6) { //数量变化 需要进行重置
                                var text, data, top, item, defaultItem, defaultIndex;
                                var refreshNum = dateNum - (scope.dateList.length - 6)
                                if (refreshNum > 0) {//追加日期数量
                                    var lastData = scope.dateList[scope.dateList.length - 4];
                                    for (var i = 1; i <= refreshNum; i++) {
                                        data = lastData.data + i;
                                        text = data + "日";
                                        top = options.height + scope.dateList[scope.dateList.length - 4].top;
                                        item = createDateTimeLi(0, top, data, false, text);
                                        scope.dateList.splice(scope.dateList.length - 3, 0, item);
                                    }
                                } else { //移除多余的日期数量
                                    var refreshNum_ = Math.abs(refreshNum);
                                    scope.dateList.splice(scope.dateList.length - 4 - refreshNum_ + 1, refreshNum_);
                                    if (scope.selectDateTime.date.item.data > scope.dateList[scope.dateList.length - 4].data) {
                                        scope.dateList[scope.dateList.length - 4].selected = true;
                                        scope.selectDateTime.date.item = scope.dateList[scope.dateList.length - 4];
                                        scope.selectDateTime.date.item.index = scope.dateList.length - 4;
                                        scrollToElm(scope.dateScroll, scope.dateList[scope.selectDateTime.date.index - 3]);
                                    }
                                }
                            }
                        }

                        function getOperateEntity(type) {
                            var entity = new Object();
                            var scrollTimer, scrollHandler, data, defaultSelected, selectedItem;
                            switch (type) {
                                case "year":
                                    entity.scrollTimer = "yearScrollTimer";
                                    entity.type = type;
                                    entity.scrollHandler = "yearScroll";
                                    entity.data = "yearList";
                                    entity.defaultSelected = scope.selectDateTime.year.item.data;
                                    entity.selectedItem = "year";
                                    break;
                                case "month":
                                    entity.scrollTimer = "monthScrollTimer";
                                    entity.type = type;
                                    entity.scrollHandler = "monthScroll";
                                    entity.data = "monthList";
                                    entity.defaultSelected = scope.selectDateTime.month.item.data;
                                    entity.selectedItem = "month";
                                    break;
                                case "date":
                                    entity.scrollTimer = "dateScrollTimer";
                                    entity.type = type;
                                    entity.scrollHandler = "dateScroll";
                                    entity.data = "dateList";
                                    entity.defaultSelected = scope.selectDateTime.date.item.data;
                                    entity.selectedItem = "date";
                                    break;
                                case "time":
                                    entity.scrollTimer = "timeScrollTimer";
                                    entity.type = type;
                                    entity.scrollHandler = "timeScroll";
                                    entity.data = "timeList";
                                    entity.defaultSelected = scope.selectDateTime.time.item.data;
                                    entity.selectedItem = "time";
                                    break;
                            }
                            return entity;
                        }

                        scope.ok = function () {
                            var datetime = getSelectDateTime();
                            //console.log(datetime);
                            setSelectDateTimeShow();
                            hide();
                        }
                        scope.cancel = function () {
                            hide();
                        }

                        function show() {
                            $ionicBackdrop.retain();
                            tem.css("display", "block");
                        }

                        function hide() {
                            tem.css("display", "none");
                            $ionicBackdrop.release();
                        }

                        function remove() {
                            tem.remove();
                        }

                        scope.$on("$destroy", function () {
                            remove();
                        })
                    }
                }
            }
        ]);
})(window, document);
